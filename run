#!/bin/bash

[ -n "$DEBUG" ] && set -o xtrace

# Check and/or set default options
# Should be 0/1
[[ "$EXIT_ON_FATAL" =~ ^[0-1]$ ]] || EXIT_ON_FATAL=0
[[ "$FIREWALL" =~ ^[0-1]$ ]] || FIREWALL=1
[[ "$PORT_FILE_CLEANUP" =~ ^[0-1]$ ]] || PORT_FILE_CLEANUP=0
[[ "$PORT_FORWARDING" =~ ^[0-1]$ ]] || PORT_FORWARDING=0
[[ "$PORT_PERSIST" =~ ^[0-1]$ ]] || PORT_PERSIST=0
[[ "$PORT_FATAL" =~ ^[0-1]$ ]] || PORT_FATAL=0
# Should be a positive integer
[[ "$KEEPALIVE" =~ ^[0-9]+$ ]] || KEEPALIVE=0
[[ "$META_PORT" =~ ^[0-9]+$ ]] || export META_PORT=443
[[ "$MONITOR_INTERVAL" =~ ^[0-9]+$ ]] || export MONITOR_INTERVAL=60
[[ "$MONITOR_RETRIES" =~ ^[0-9]+$ ]] || export MONITOR_RETRIES=3

# Maybe also check the following. They are all blank by default.
# LOCAL_NETWORK=
# PIA_CN=
# PIA_IP=
# PIA_PORT=
# PORT_FILE=
# QDISC=
# VPNDNS=
# MTU=

configdir="/pia"
tokenfile="$configdir/.token"
[ "$PORT_PERSIST" = "1" ] && pf_persistfile="$configdir/portsig.json"

# Run custom scripts at the appropriate time if present
# We also run custom commands specified by the PRE_UP, POST_UP, PRE_DOWN, and POST_DOWN env vars at the same time
custom_scriptdir="/pia/scripts"
pre_up_script="$custom_scriptdir/pre-up.sh"
post_up_script="$custom_scriptdir/post-up.sh"
pre_down_script="$custom_scriptdir/pre-down.sh"
post_down_script="$custom_scriptdir/post-down.sh"

sharedir="/pia-shared"
# Set env var PORT_FILE to override where the forwarded port number is dumped
# Might need to handle setting file ownership/permissions too
portfile="${PORT_FILE:-$sharedir/port.dat}"

pia_cacrt="/rsa_4096.crt"
wg_conf="/etc/wireguard/wg0.conf"

firewall_init () {
  # Drop everything by default
  ip6tables -P OUTPUT DROP &> /dev/null
  ip6tables -P INPUT DROP &> /dev/null
  ip6tables -P FORWARD DROP &> /dev/null
  iptables -P OUTPUT DROP &> /dev/null
  iptables -P INPUT DROP &> /dev/null
  iptables -P FORWARD DROP &> /dev/null

  # Allow loopback traffic and input for established connections
  iptables -A OUTPUT -o lo -j ACCEPT
  iptables -A INPUT -i lo -j ACCEPT
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  firewall_temp_add
}

# This can be used to test that a particular pattern matching module is available
# A bit blunt, but other methods such as using 'iptables-restore --test' seem to pass in some cases
# when the command itself will fail.
iptables_test () {
  iptables -A OUTPUT "$@" &> /dev/null || return 1
  iptables -D OUTPUT "$@"
  return 0
}

firewall_temp_add () {
  # Temporarily allow the following:
  # Only include the following when available
  iptables_test -p udp -m owner --uid-owner root -j REJECT && local owner="-m owner --uid-owner $UID"
  iptables_test -p tcp -m multiport --sports "$curl_local_port_min":"$curl_local_port_max" -j REJECT && local multiport="-m multiport --sports $curl_local_port_min:$curl_local_port_max"
  # DNS queries
  if [ -n "$original_extservers" ]; then
    # shellcheck disable=SC2086
    iptables -A OUTPUT -o "$outgoing_iface_dns" $owner -p udp --dport 53 -d "$original_nameserver" -j ACCEPT
    for extserver in $original_extservers; do
      [[ "$extserver" =~ "host" ]] && continue
      # shellcheck disable=SC2086
      iptables -A OUTPUT $owner -p udp --dport 53 -d "$extserver" -j ACCEPT
    done
  else
    # This is for compatibility with older versions of Docker in case custom container
    # dns servers are set as we don't know what they're set to
    # shellcheck disable=SC2086
    iptables -A OUTPUT $owner -p udp --dport 53 -j ACCEPT
  fi
  # HTTPS to download the server list and access API for generating auth token
  # shellcheck disable=SC2086
  iptables -A OUTPUT -o "$outgoing_iface" $owner -p tcp --dport 443 $multiport -j ACCEPT
  # API access to register the public WireGuard key
  # shellcheck disable=SC2086
  iptables -A OUTPUT -o "$outgoing_iface" $owner -p tcp --dport 1337 $multiport -j ACCEPT
  # Non-default API port if set
  # shellcheck disable=SC2086
  [ "$META_PORT" -ne 443 ] && iptables -A OUTPUT -i "$outgoing_iface" $owner -p tcp --dport "$META_PORT" $multiport -j ACCEPT
  # '-m owner' seems to still drop a few packets that should match
  # Allowing output for connections already permitted seems enough to pick up anything that was missed
  iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  firewall_temp_state=1
}

firewall_temp_remove () {
  iptables_test -p udp -m owner --uid-owner root -j REJECT && local owner="-m owner --uid-owner $UID"
  iptables_test -p tcp -m multiport --sports "$curl_local_port_min":"$curl_local_port_max" -j REJECT && local multiport="-m multiport --sports $curl_local_port_min:$curl_local_port_max"
  if [ -n "$original_extservers" ]; then
    # shellcheck disable=SC2086
    iptables -D OUTPUT -o "$outgoing_iface_dns" $owner -p udp --dport 53 -d "$original_nameserver" -j ACCEPT
    for extserver in $original_extservers; do
      [[ "$extserver" =~ "host" ]] && continue
      # shellcheck disable=SC2086
      iptables -D OUTPUT $owner -p udp --dport 53 -d "$extserver" -j ACCEPT
    done
  else
    # shellcheck disable=SC2086
    iptables -D OUTPUT $owner -p udp --dport 53 -j ACCEPT
  fi
  # shellcheck disable=SC2086
  iptables -D OUTPUT -o "$outgoing_iface" $owner -p tcp --dport 443 $multiport -j ACCEPT
  # shellcheck disable=SC2086
  iptables -D OUTPUT -o "$outgoing_iface" $owner -p tcp --dport 1337 $multiport -j ACCEPT
  # shellcheck disable=SC2086
  [ "$META_PORT" -ne 443 ] && iptables -D OUTPUT -o "$outgoing_iface" $owner -p tcp --dport "$META_PORT" $multiport -j ACCEPT
  iptables -D OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  unset firewall_temp_state
}

# Alpine 3.19 changed the default iptables backend to iptables-nft
# Check that the host supports this and revert to iptables-legacy if needed
# Can force one or the other using NFTABLES=0/1 env var
nftables_setup () {
  [ -z "$NFTABLES" ] && iptables -L &> /dev/null && return
  [ "$NFTABLES" = "1" ] && return
  echo "Using legacy iptables backend"
  ln -sf xtables-legacy-multi "$(type -p iptables)"
  ln -sf xtables-legacy-multi "$(type -p iptables-save)"
  ln -sf xtables-legacy-multi "$(type -p iptables-restore)"
  ln -sf xtables-legacy-multi "$(type -p ip6tables)"
  ln -sf xtables-legacy-multi "$(type -p ip6tables-save)"
  ln -sf xtables-legacy-multi "$(type -p ip6tables-restore)"
  if ! iptables -L &> /dev/null; then
    echo "Error reverting to legacy iptables backend"
    fatal_error
  fi
}

finish () {
  [ -x "$pre_down_script" ] && run_command "$pre_down_script"
  [ -n "$PRE_DOWN" ] && run_command "$PRE_DOWN"
  [ "$PORT_FORWARDING" -eq 1 ] && pkill -f 'pf.sh'
  echo "Shutting down WireGuard"
  [ "$PORT_FILE_CLEANUP" -eq 1 ] && [ -w "$portfile" ] && rm "$portfile"
  wg-quick down wg0
  [ -x "$post_down_script" ] && run_command "$post_down_script"
  [ -n "$POST_DOWN" ] && run_command "$POST_DOWN"
  exit 0
}

trap finish SIGTERM SIGINT SIGQUIT

endpoint_monitor () {
  # To force an unresponsive endpoint for testing:
  # wg set wg0 listen-port 1234 peer $(wg show | grep peer | cut -F2) endpoint 127.0.0.1:1234
  local failures=0
  while true; do
    if ! ACTIVE_HEALTHCHECKS=1 PORT_FORWARDING=0 /scripts/healthcheck.sh &> /dev/null; then
      ((failures++))
    else
      failures=0
    fi
    [ "$failures" -ge "$MONITOR_RETRIES" ] && return 1
    sleep "$MONITOR_INTERVAL"
  done
}

reconnect_rule_add () {
  ip -4 rule add oif "$outgoing_iface_dns" to "$original_nameserver" dport 53 uidrange "$UID-$UID" lookup main pref 20
  ip -4 rule add from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport 443 uidrange "$UID-$UID" lookup main pref 30
  ip -4 rule add from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport 1337 uidrange "$UID-$UID" lookup main pref 40
  [ "$META_PORT" -ne 443 ] && ip -4 rule add from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport "$META_PORT" uidrange "$UID-$UID" lookup main pref 50
  for extserver in $original_extservers; do
    [[ "$extserver" =~ "host" ]] && continue
    ip -4 rule add to "$extserver" dport 53 uidrange "$UID-$UID" lookup main pref 60
  done
  reconnect_rule_state=1
}

reconnect_rule_remove () {
  for extserver in $original_extservers; do
    [[ "$extserver" =~ "host" ]] && continue
    ip -4 rule del to "$extserver" dport 53 uidrange "$UID-$UID" lookup main pref 60
  done
  ip -4 rule del oif "$outgoing_iface_dns" to "$original_nameserver" dport 53 uidrange "$UID-$UID" lookup main pref 20
  ip -4 rule del from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport 443 uidrange "$UID-$UID" lookup main pref 30
  ip -4 rule del from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport 1337 uidrange "$UID-$UID" lookup main pref 40
  [ "$META_PORT" -ne 443 ] && ip -4 rule del from "$outgoing_addr" sport "$curl_local_port_min-$curl_local_port_max" dport "$META_PORT" uidrange "$UID-$UID" lookup main pref 50
  unset reconnect_rule_state
}

now_sleep () {
  # If we need to, keep an eye on the port forwarding script and also monitor for unresponsive endpoint
  if [ "$RECONNECT" = "1" ]; then
    endpoint_monitor &
    local endpoint_monitor_pid="$!"
    echo "Started endpoint monitor"
  fi

  while [ -n "$pf_pid$endpoint_monitor_pid" ]; do
    # shellcheck disable=SC2086
    wait -n $endpoint_monitor_pid $pf_pid
    local result=$?
    # Check which pid terminated
    if [ -n "$pf_pid" ] && ! kill -0 "$pf_pid" 2> /dev/null; then
      if [ "$PORT_FORWARDING" = "1" ] && [ "$PORT_FATAL" = "1" ] && [ $result -ne 0 ];then
        echo "Port forwarding script failed"
        [ -n "$endpoint_monitor_pid" ] && kill "$endpoint_monitor_pid"
        fatal_error
      fi
      echo "Port forwarding script closed"
      unset pf_pid
    fi
    if [ -n "$endpoint_monitor_pid" ] && ! kill -0 "$endpoint_monitor_pid" 2> /dev/null && [ "$result" -ne 0 ]; then
      echo "Unresponsive endpoint detected. Regenerating WireGuard config"
      if [ "$PORT_FORWARDING" = "1" ]; then
        [ -n "$pf_pid" ] && kill "$pf_pid"
        unset pf_pid
        local prevport
        [ -r "$portfile" ] && prevport=$(cat "$portfile")
        if [ "$FIREWALL" = "1" ] && [ -n "$prevport" ]; then
          iptables -D INPUT -p tcp -i wg0 --dport "$prevport" -j ACCEPT
          iptables -D INPUT -p udp -i wg0 --dport "$prevport" -j ACCEPT
        fi
      fi

      [ -n "$PRE_RECONNECT" ] && run_command "$PRE_RECONNECT"

      reconnect_rule_add
      [ "$FIREWALL" = "1" ] && firewall_temp_add

      # Bump these up in case of extended downtime
      CURL_RETRY_DELAY=15 CURL_MAX_TIME=3600 CURL_RETRY=9999 gen_configs

      [ "$FIREWALL" = "1" ] && firewall_temp_remove
      reconnect_rule_remove

      local new_privkey new_endpoint new_peerpubkey new_ip old_peerpubkey old_ip
      new_privkey=$(grep 'PrivateKey = ' "$wg_conf" | sed 's/PrivateKey = \(.*\)/\1/')
      new_endpoint=$(grep 'Endpoint = ' "$wg_conf" | sed 's/Endpoint = \(.*\)/\1/')
      new_peerpubkey=$(grep 'PublicKey = ' "$wg_conf" | sed 's/PublicKey = \(.*\)/\1/')
      new_ip=$(grep 'Address = ' "$wg_conf" | sed 's/Address = \(.*\)/\1/')
      old_peerpubkey=$(wg show wg0 |grep 'peer: ' | sed 's/peer: \(.*\)/\1/')
      old_ip=$(ip -4 -o addr show dev wg0 | awk '$3 == "inet" {print $4}')

      wg set wg0 private-key <(echo "$new_privkey") || fatal_error
      wg set wg0 peer "$new_peerpubkey" endpoint "$new_endpoint" allowed-ips "0.0.0.0/0" || fatal_error
      if [ "$KEEPALIVE" -gt 0 ]; then
        wg set wg0 peer "$new_peerpubkey" persistent-keepalive "$KEEPALIVE" || fatal_error
      fi
      wg set wg0 peer "$old_peerpubkey" remove || fatal_error
      # Adding the new address first before removing the old one seems to be needed
      ip -4 address add "$new_ip" dev wg0 || fatal_error
      ip -4 address del "$old_ip" dev wg0 || fatal_error
      echo "Updated WireGuard endpoint"
      echo; wg show wg0; echo

      [ -n "$POST_RECONNECT" ] && run_command "$POST_RECONNECT"

      [ "$PORT_FORWARDING" = "1" ] && pf_start
      now_sleep
    elif [ -n "$endpoint_monitor_pid" ] && ! kill -0 "$endpoint_monitor_pid" 2> /dev/null && [ "$result" -eq 0 ]; then
      unset endpoint_monitor_pid
    fi
  done

  sleep infinity &
  wait $!
}

fatal_error () {
  echo "Fatal error"
  [ "$firewall_temp_state" = "1" ] && firewall_temp_remove
  [ "$reconnect_rule_state" = "1" ] && reconnect_rule_remove
  [ -n "$FATAL_SCRIPT" ] && run_command "$FATAL_SCRIPT"
  [ "$EXIT_ON_FATAL" -eq 1 ] && exit 1
  sleep infinity &
  wait $!
}

run_command () {
  echo "Running: $1"
  eval "$1"
}

gen_wgconf () {
  /scripts/wg-gen.sh -l "$1" -t "$tokenfile" -o "$wg_conf" -k "/RegionsListPubKey.pem" -d "$VPNDNS" -m "$MTU" -c "$pia_cacrt" \
    | sed --unbuffered -e 's/^/[wg-gen] /'
  return "${PIPESTATUS[0]}"
}

# Unsure how long an auth token will remain valid
get_auth_token () {
  [ -r "$USER_FILE" ] && echo "Reading username from $USER_FILE" && USER=$(<"$USER_FILE")
  [ -r "$PASS_FILE" ] && echo "Reading password from $PASS_FILE" && PASS=$(<"$PASS_FILE")
  [ -z "$PASS" ] && echo "PIA password not set. Unable to retrieve new auth token." && fatal_error
  [ -z "$USER" ] && echo "PIA username not set. Unable to retrieve new auth token." && fatal_error
  echo "Generating auth token"
  local token
  if ! token=$(/scripts/pia-auth.sh -u "$USER" -p "$PASS" -n "$META_CN" -i "$META_IP" -o "$META_PORT" -c "$pia_cacrt"); then
    echo "Failed to acquire new auth token" && fatal_error
  fi
  echo -n "$token" > "$tokenfile"
  chmod 600 "$tokenfile"
}

if [[ $(getpcaps 0) == "0: =ep" ]]; then
  echo "The container appears to be running with elevated privileges. The container generally only requires the NET_ADMIN capability to run."
elif ! getpcaps 0 | grep cap_net_admin >& /dev/null; then
  echo "The container requires the NET_ADMIN capability to run. See the README for more info."
  fatal_error
fi

echo "Container build info: $BUILDINFO"

nftables_setup

[ -x "$pre_up_script" ] && run_command "$pre_up_script"
[ -n "$PRE_UP" ] && run_command "$PRE_UP"

# This is for the reconnection logic. If we explicitly set both interface and dns for curl requests, then we can add
# temporary routes later on to repeat the untunneled setup requests if needed without bringing the WireGuard interface down.
original_nameserver=$(grep -im 1 '^nameserver' /etc/resolv.conf |cut -F2)
outgoing_iface=$(ip -4 route show default | awk '/default/ {print $5}' | head -1)
outgoing_iface_dns=$(ip -4 route get "$original_nameserver" | head -1 | sed 's/.*dev \([^ ]*\) .*/\1/')
# Setting --interface to an address rather than a name seems to be needed for --local-port to work
outgoing_addr=$(ip -4 -o addr show "$outgoing_iface" | awk '{print $4}' | cut -d "/" -f 1)
# ExtServers is present in resolv.conf from Docker 26.0 and exposes the dns servers used by docker's internal
# resolver when the container has custom dns settings.
original_extservers=$(grep '# ExtServers:' /etc/resolv.conf | sed 's/# ExtServers: \[\(.*\)\]/\1/')
# Setting the local port also allows more specific temporary routes/firewall rules
# Re-using a single local port for multiple requests fails so a range is used instead: https://github.com/curl/curl/issues/6288
curl_local_port_min=12300
curl_local_port_max=12310
export CURL_OVERRIDE_PARAMS="--interface $outgoing_addr --dns-interface $outgoing_iface_dns --dns-servers $original_nameserver --local-port $curl_local_port_min-$curl_local_port_max"
echo "curl options: $CURL_OVERRIDE_PARAMS"
echo "resolv.conf ExtServers: $original_extservers"

[ "$FIREWALL" -eq 1 ] && firewall_init

[ "$PORT_FILE_CLEANUP" -eq 1 ] && [ -w "$portfile" ] && rm "$portfile"

# LOC is ignored and may be blank if ip/cn/port override vars or a dedicated ip are used
[ -n "$PIA_CN" ] && [ -n "$PIA_IP" ] && [ -n "$PIA_PORT" ] && LOC="manual"
[ -n "$PIA_DIP_TOKEN" ] && LOC="dip"

# No LOC or specific ip/port/cn supplied
[ -z "$LOC" ] && /scripts/wg-gen.sh -a && fatal_error

# The script would previously save a trailing newline to $tokenfile which doesn't play well with curl's name@file url-encoding syntax
[ -r "$tokenfile" ] && [ "$(tail -c 1 "$tokenfile" | wc -l)" -gt 0 ] && sed -zi 's/\n//g' "$tokenfile"

[ ! -r "$tokenfile" ] && get_auth_token

# Generate wg0.conf
# LOC can be a single location id, or a space or comma separated list
# Multiple location ids are used as fallback if the initial registration fails
gen_configs() {
  gen_success=0
  for location in ${LOC//,/ }; do
    gen_wgconf "$location"
    local result=$?
    if [ "$result" -eq 2 ]; then
      # Reauth and retry if auth failed
      # An auth error implies that the location id is valid and the endpoint responsive
      rm "$tokenfile"
      get_auth_token
      gen_wgconf "$location" || fatal_error
    elif [ "$result" -eq 3 ]; then
      echo "Location $location not found"
      continue
    elif [ "$result" -eq 4 ]; then
      echo "Registration failed"
      continue
    elif [ "$result" -eq 5 ]; then
      echo "Error retrieving server info"
      fatal_error
    elif [ "$result" -ne 0 ]; then
      echo "Failed to generate WireGuard config"
      fatal_error
    fi
    gen_success=1
    break
  done

  if [ "$gen_success" -eq 0 ]; then
    echo "Failed to generate WireGuard config for the selected location/s: $LOC"
    fatal_error
  fi
}

gen_configs

[ "$FIREWALL" -eq 1 ] && firewall_temp_remove

[ "$KEEPALIVE" -gt 0 ] && echo "PersistentKeepalive = $KEEPALIVE" >> "$wg_conf"

echo "Bringing up WireGuard interface wg0"
wg-quick up wg0 || fatal_error

echo
wg
echo

echo "WireGuard successfully started"

# Show a warning if src_valid_mark=1 needs setting, otherwise incoming packets will be dropped
effective_rp_filter="$(sysctl -n net.ipv4.conf.all.rp_filter)"
[ "$(sysctl -n net.ipv4.conf.default.rp_filter)" -gt "$effective_rp_filter" ] && effective_rp_filter="$(sysctl -n net.ipv4.conf.default.rp_filter)"
[ "$effective_rp_filter" -eq 1 ] && [ "$(sysctl -n net.ipv4.conf.all.src_valid_mark)" -ne 1 ] && \
  echo "Warning: Container requires net.ipv4.conf.all.src_valid_mark=1 sysctl to be set when rp_filter is set to strict. See the README for more info."

# Add qdisc to wg0 if requested
# eg: QDISC=cake bandwidth 20Mbit
# shellcheck disable=SC2086
[ -n "$QDISC" ] && echo "Adding qdisc to wg0: $QDISC" && tc qdisc add root dev wg0 $QDISC && tc -statistics qdisc show dev wg0

if [ "$FIREWALL" -eq 1 ]; then
  echo "Firewall enabled: Dropping untunnelled traffic by default"
  # Allow docker network input/output
  for iface in /sys/class/net/*; do
    iface="${iface##*/}"
    [[ "$iface" = @(lo|wg0) ]] && continue
    docker_network="$(ip -4 -o addr show dev "$iface"|
            awk '$3 == "inet" {print $4}')"
    [ -z "$docker_network" ] &&  continue
    echo "Allowing untunnelled access to $docker_network via $iface"
    iptables -A OUTPUT -o "$iface" --destination "$docker_network" -j ACCEPT
    iptables -A INPUT -i "$iface" --source "$docker_network" -j ACCEPT
  done

  # Allow WG stuff
  iptables -A OUTPUT -o wg0 -j ACCEPT
  iptables -A OUTPUT -m mark --mark "$(wg show wg0 fwmark)" -j ACCEPT

fi

# Set env var LOCAL_NETWORK=192.168.1.0/24 to allow LAN input/output
# Accept comma separated as well as space separated list
if [ -n "$LOCAL_NETWORK" ]; then
  [ -z "$VPNDNS" ] && pia_dns=$(grep 'DNS = ' "$wg_conf" | sed 's/DNS = \(.*\)/\1/')
  for range in ${LOCAL_NETWORK//,/ }; do
    if [ -n "$pia_dns" ]; then
      grepcidr "$range" <(echo "$pia_dns") >/dev/null && \
        echo "Warning: LOCAL_NETWORK range $range overlaps with PIA's default dns servers ($pia_dns)" && \
        echo "Consider setting custom dns servers using the VPNDNS env var if there are name resolution issues"
    fi
    if [ "$FIREWALL" -eq 1 ]; then
      echo "Allowing untunnelled access to $range via $outgoing_iface"
      iptables -A OUTPUT -o "$outgoing_iface" --destination "$range" -j ACCEPT
      iptables -A INPUT -i "$outgoing_iface" --source "$range" -j ACCEPT
    fi
    echo "Adding route to $range"
    ip -4 rule add to "$range" lookup main pref 10
  done
fi

# Nat+forward traffic from a specific interface if requested
# eg. FWD_IFACE=eth1
if [ -n "$FWD_IFACE" ]; then
  iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE
  iptables -A FORWARD -i wg0 -o "$FWD_IFACE" -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -A FORWARD -i "$FWD_IFACE" -o wg0 -j ACCEPT
  echo "Forwarding traffic from $FWD_IFACE to VPN"
fi

pf_start () {
  [ "$PORT_FORWARDING" -eq 1 ] && pkill -f 'pf.sh'
  pf_api_ip=$(grep '#pf api' "$wg_conf"| sed 's/#pf api ip: \(.*\)/\1/')
  pf_cn=$(grep '#cn: ' "$wg_conf"| sed 's/#cn: \(.*\)/\1/')
  if [ "$PORT_FORWARDING" -eq 1 ] && [ -n "$pf_api_ip" ]; then
    echo "Starting port forward script"
    /scripts/pf.sh -t "$tokenfile" -i "$pf_api_ip" -n "$pf_cn" -p "$portfile" -c "$pia_cacrt" -s "/scripts/pf_success.sh" -r "$pf_persistfile" -f wg0 \
      | sed --unbuffered -e 's/^/[pf] /' &
    pf_pid=$!
  elif [ "$PORT_FORWARDING" -eq 1 ] && [ -z "$pf_api_ip" ]; then
    echo "Warning: Port forwarding is unavailable on this server. Try a different location."
  fi
}

[ "$PORT_FORWARDING" -eq 1 ] && pf_start

[ -x "$post_up_script" ] && run_command "$post_up_script"
[ -n "$POST_UP" ] && run_command "$POST_UP"

# Workaround a NAT bug when using Wireguard behind a particular Asus router by regularly changing the local port
# Set env var CYCLE_PORTS to a space-separated list of ports to cycle through
# Eg: CYCLE_PORTS=50001 50002 50003
# Optionally set CYCLE_INTERVAL to number of seconds to use each port for. Defaults to 180 (3mins)
# Could probably remove this - might be better suited to a custom script if needed
if [ -n "$CYCLE_PORTS" ]; then
  echo "Changing Wireguard's local port every ${CYCLE_INTERVAL:-180}s"
  while true; do
    for port in $CYCLE_PORTS; do
      wg set wg0 listen-port "$port"
      sleep "${CYCLE_INTERVAL:-180}" & wait $!
    done
  done
fi

now_sleep
